h1=. tcd (traffic control daemon)

=====================================================================
tcd is a small Ruby program to collect statistics about your network 
interfaces and then use that information to allow you the user to 
specify actions or programs to run when an interface reaches a 
predetermined capacity. Example, it lets you disable an interface when 
it has used 99% of it's available bandwidth for the month.

**Current Capabilities**
Currently, tcd can poll for statistics, store those statistics, and triggers
the necessary actions to run when they are intended.


**Configuration (Profiles)**
Configuration is done in two parts - configuring a profile, and writing a
trigger.
The profile contains the information necessary for determining if an interface
has gone over it's bandwidth capacity for the month.  Information like how to
collect statistics on that interface, the rollover day for the interface billing
cycle, what the maximum capacity of an interface is.
The trigger is what tells TCD what to do when an interface reaches a certain level.
You will usually need two triggers, one to throttle your interface if it goes over
capacity, and another trigger to undo the throttling when your billing cycle rolls
over.

A profile consists of a couple of methods,

@useProfile()@
@getStats()@
@rolloverDay()@
@maxCapacity()@

**useProfile()** must return true if this profile should be polled on the next 
iteration of the main() loop.

**getStats()** must return a hash in the form of

@{ :INTERFACE_NAME => {:in=>x,:out=>y}}@

where INTERFACE_NAME is a symbol of the name of the interface, and x and y are 
the number of received and transmitted bytes respectively, as intergers.  
Executing getStats() must reset the counters - that is, if only one byte has 
been sent and received since the last time getStats() was called, x and y 
should both equal 1.  Not 1, plus however many bytes had traversed previously. 

There are a couple of ways you can go about writing your getStats() method to 
retrieve the information, more can be found below, and in the example in 
lib/tcd/profiles/.

**rolloverDay()** must return a hash such as

@{ :INTERFACE => DAY }@

where INTERFACE is an interface in that profile, and DAY is the first day of your
billing cycle to count bandwidth from.  Day must be an interger, not a string.
For example, if the interface name is eth0, and the first day of your biling cycle
is the 11th, then it would look like

@{ :eth0 => 11,@
@:INTERFACE => DAY}@

There we also have an example of multiple interfaces, simply add another element to 
the hash.

**maxCapacity()** must return a hash similar to that of **rolloverDay()** except that DAY
becomes the number of bytes that may traverse an interface before it reaches 100% capacity.
So, for a connection with a 60GB capacity limit, this would look like

@{ :eth0 => 64424509440  }@


**Configuration (Ways of getStats()-ing)**
tcd does not itself provide a way to collect statistics from anywhere - instead we
require that you write the getStats method for your profile yourself.  This means,
though some of the work is offloaded, it is also abstracted. You can plug tcd
in to any traffic of statistical analysis tools you like.  Personally I prefer keeping
it simple, therefor I suggest using either a couple Iptables rules as I currently do,
or using pmacct.  Pmacct is a very neat little program which is capable of various
traffic statistics collection options.

Aggregating statistics from multiple gateways or multiple interfaces is sometimes best
done on a machine other than the gateway(s) itself.  Ideally you want to congregate all
statistics to one machine which you run the tcd_collector daemon on and which stores
the stats and executes the scheduled triggers.  This raises the question of how to
get the stats from the output of iptables or pmacct from one machine to another.
For this I use ssh, and the noted ability of locking down certain ssh keys so that when
a key is used to login, that login session dumps the output of a pre-set command and then
closes the session.  

Example...

Currently, I use a fairly simple - and to the best of my investigating, fairly secure - 
setup.  I created two new ssh keys in the tcd directory, both without passphrases.  
One for the in traffic and one for the out traffic.  Then, I copied the keys to my gateway
machine and appended them to my authorized_keys file, but before finishing, I edited
the lines that I'd just added to the authorized_keys file, such that the lines that began as

@ssh-rsa AAAAB3N...=@
@ssh-rsa AAAAB3N...=@

Changed to

@command="/usr/bin/pmacct -s -e -p /tmp/pmacct_eth2_tcd_in.pipe" ssh-rsa AAAAB3N...=@
@command="/usr/bin/pmacct -s -e -p /tmp/pmacct_eth2_tcd_out.pipe" ssh-rsa AAAAB3N...=@

OK now lets point out some things.  This tells ssh that logging in with that key means
that the user is allowed to login, to recieve the output of command="" executing, and
then log out again. And nothing else.  Don't take my word for it, test it for yourself.
If you want to be even more secure you can use from= to only allow logins from specific
hosts.

Now I use iptables rules, but you can also use pmacct.
I was using pmacct on my gateway to collect traffic statistics, and you can see in the
example above, I'm executing pmacct on 2 different pipes, for in and out respectively.
How you collect and get these statistics into the **getStats()** method's output is
left entirely up to you so you can use any method you wish though there are examples
to help you get started.  If, however, you want to mimic my setup, then install 
pmacct on your gateway and try out this example config. I extracted the important 
lines from my own config; I'd post my config itself but it has several plugins 
configured and may be overcomplicated for the average user.

__/etc/pmacct/pmacctd.eth2.conf__

@daemonize: true@
@pidfile: /var/run/pmacctd.pid@
@syslog: daemon@
@interface: eth2@
@plugins: memory[tcd_in], memory[tcd_out]@
@aggregate[tcd_in]: dst_host@
@aggregate[tcd_out]: src_host@
@aggregate_filter[tcd_in]: dst host 1.2.3.4@
@aggregate_filter[tcd_out]: src host 1.2.3.4@
@imt_path[tcd_in]: /tmp/pmacct_eth2_tcd_in.pipe@
@imt_path[tcd_out]: /tmp/pmacct_eth2_tcd_out.pipe@

First of all, notice that the interface I'm monitoring is eth2, and the filename 
is **/etc/pmacct/pmacctd.__eth2__.conf**.  
Pmacct will look for /etc/pmacct/pmacctd.INTERFACE.conf where INTERFACE is each 
interface.  Also note the imt_path directives, those are the pipe locations that 
you need to use in the authorized_keys file's command= call.  For more information
on pmacct configurations, Google is your friend.





h4. Installation

After you've decided on a way of collecting statistics (or implemented pmacct and 
the examples above) it's time to pull the code;

@git clone git://github.com/jeffWelling/tcd.git@

in a working directory of your choice.
Then, 

@cd tcd@

or whatever you chose to override the directory name with, if you did.
Before being able to check any statistics, you are going to need to create a 
profile which is outlined above in **Configuration**.  After creating a profile,
you can run

@bin/tcd_collector start@

and that should start the tcd_collector daemon.  This will create log files 
in ~/.tcd/stats for statistics collection and to calculate the total bandwidth 
used in a billing period.

